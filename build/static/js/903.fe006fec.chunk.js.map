{"version":3,"file":"static/js/903.fe006fec.chunk.js","mappings":"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","sources":["components/error/Error.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/searchForm/SearchForm.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","components/spinner/spinner.svg","components/spinner/Spinner.js","services/MarvelServices.js","hooks/http.hook.js","utils/setContent.js","utils/setListContent.js"],"sourcesContent":["import error from './error.png';\r\nimport './error.scss'\r\n\r\nfunction Error() {\r\n    return (\r\n        <>\r\n            <img src={error} alt=\"\" className=\"error\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Error;","import { useState, useEffect } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport useMarvelServices from '../../services/MarvelServices';\r\nimport ReactLoading from 'react-loading';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './randomChar.scss';\r\nimport hammer from '../../resources/img/hammer-and-shield.png'\r\n\r\n\r\nfunction RandomChar() {\r\n    const [character, setCharacter] = useState({});\r\n\r\n    const {getCharacterById, process, setProcess} = useMarvelServices();\r\n\r\n    useEffect(() => {\r\n        updateCharacter();\r\n    }, [])\r\n\r\n    function updateCharacter() {\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\r\n        getCharacterById(id).then(character => setCharacter(character)).then(() => setProcess('confirmed'));\r\n    }\r\n               \r\n    return (\r\n        <section className=\"random-info\">\r\n            <CSSTransition in={process === 'confirmed'} timeout={300} classNames=\"appear\">\r\n                <div className=\"random-info__block\">\r\n                    {setContent(process, View, character)}\r\n                </div>\r\n            </CSSTransition>\r\n            \r\n            <div className=\"random-info__static\">\r\n                <div className=\"random-info__static-text\">\r\n                    <p>\r\n                        Random character for today! <br/>\r\n                        Do you want to get to know him better?\r\n                    </p>\r\n                    <p>Or choose another one</p>\r\n                </div>\r\n                <button className=\"button button_red\" disabled={process === 'loading'} onClick={updateCharacter}>\r\n                    {process === 'loading' ? <ReactLoading type='cylon' width='50px' height='50px'/> : 'Try it'}\r\n                </button>\r\n                <img src={hammer} alt=\"hammer-and-shiled\"/>\r\n            </div>\r\n        </section>\r\n    );  \r\n}\r\n\r\nfunction View({data}) {\r\n    const {name, description, thumbnail, homepage, wiki} = data;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"random-info__image\">\r\n            <img src={thumbnail} alt={name}/>\r\n            </div>\r\n            <div className=\"random-info__info\">\r\n                <div className=\"random-info__text\">\r\n                    <p className=\"random-info__name\">{name}</p>\r\n                    <p className=\"random-info__description\">\r\n                        {description ? (description.length > 220 ? description + '...' : description) : null}\r\n                    </p>\r\n                </div>\r\n                <div className=\"random-info__btns\">\r\n                    <a className=\"button button_red\" href={homepage}>Homepage</a>\r\n                    <a className=\"button\" href={wiki}>Wiki</a>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactLoading from 'react-loading';\r\nimport setListContent from '../../utils/setListContent';\r\nimport useMarvelServices from '../../services/MarvelServices';\r\n\r\nimport './charList.scss';\r\n\r\nfunction CharList(props) {\r\n    const [characters, setCharacters] = useState([]),\r\n          [offset, setOffset] = useState(210),\r\n          [initialLoading, setInitialLoading] = useState(true),\r\n          [charsEnded, setCharsEnded] = useState(false);\r\n    \r\n    const {getCharacters, process, setProcess} = useMarvelServices();\r\n\r\n    const cardsRefs = useRef([]);\r\n          \r\n    useEffect(() => {\r\n        if (initialLoading) {\r\n            updateCharacters();\r\n        }\r\n    }, []) \r\n\r\n    function updateCharacters(offset) {\r\n        getCharacters(offset)\r\n            .then(characters => characters.map(character => {\r\n                return {\r\n                    name: character.name,\r\n                    thumbnail: character.thumbnail,\r\n                    id: character.id\r\n                }\r\n            }))\r\n            .then(onLoaded);\r\n    }\r\n\r\n    async function onLoaded(newCharacters) {\r\n        setCharacters([...characters, ...newCharacters]);\r\n        setInitialLoading(false);\r\n        setOffset(offset + 9);\r\n        setCharsEnded(newCharacters.length < 9 ? true : false);\r\n        setProcess('confirmed')\r\n    }\r\n\r\n    function setFocus(id) {\r\n        cardsRefs.current.forEach(card => {\r\n            card.style.transform = 'none';\r\n            card.style.boxShadow = 'none';\r\n        });\r\n        cardsRefs.current[id].style.transition = 'all 0.15s';\r\n        cardsRefs.current[id].style.transform = 'translateY(-6px)';\r\n        cardsRefs.current[id].style.boxShadow = '0px 5px 20px #9F0013';\r\n        cardsRefs.current[id].focus();\r\n    }\r\n\r\n    function renderCharacters(characters) {\r\n        return characters.map((character, i) => {\r\n            const {name, thumbnail, id} = character;\r\n            return (\r\n                <li className=\"cards__card\"\r\n                    ref={element => cardsRefs.current[i] = element}\r\n                    tabIndex={0}  \r\n                    onClick={() => {\r\n                        props.onCharSelected(id);\r\n                        setFocus(i);\r\n                    }}\r\n                    onKeyDown={(event) => {\r\n                        if (event.key.match(/Enter/)) {\r\n                            event.preventDefault();\r\n                            props.onCharSelected(id);\r\n                            setFocus(i);\r\n                        }\r\n                    }}>\r\n                    \r\n                    <img src={thumbnail} alt={name} className=\"card__img\"/>\r\n                    <p className=\"card__name\">{name}</p>\r\n                </li>\r\n            )\r\n                   \r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (characters.length > 9 && process === 'confirmed') {\r\n            window.scrollTo({\r\n                left: 0,\r\n                top: document.body.scrollHeight,\r\n                behavior: \"smooth\"\r\n            });\r\n        }\r\n    }, [process])\r\n\r\n    const content = useMemo(() => {\r\n        return setListContent(process, () => renderCharacters(characters), initialLoading)\r\n    }, [process])\r\n                     \r\n    return (\r\n        <div className=\"cards\">\r\n            <ul className=\"cards__container\">\r\n                {content}\r\n            </ul>\r\n            {initialLoading || process === 'error' ? null :\r\n            <button \r\n                className=\"button button_red\" \r\n                disabled={process === 'loading'} \r\n                onClick={() => updateCharacters(offset)}\r\n                style={{display: charsEnded ? 'none' : 'flex'}}>\r\n                {process === 'loading' ? <ReactLoading type='cylon' width='50px' height='50px'/> : 'Load more'}\r\n            </button>}\r\n        </div>\r\n    );\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\r\n\r\nfunction Skeleton() {\r\n    return (\r\n        <div className=\"about__skeleton\">\r\n            <p>Please select a character to see information</p>\r\n            <div className=\"skeleton pulse\">\r\n                <div className=\"skeleton__row\">\r\n                    <div className=\"skeleton__circle\"></div>\r\n                    <div className=\"skeleton__line skeleton__line_thin\"></div>\r\n                </div>\r\n                <div className=\"skeleton__row\">\r\n                    <div className=\"skeleton__line\"></div>\r\n                </div>\r\n                <div className=\"skeleton__row\">\r\n                    <div className=\"skeleton__line\"></div>\r\n                </div>\r\n                <div className=\"skeleton__row\">\r\n                    <div className=\"skeleton__line\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Skeleton;","import { useState } from 'react';\r\nimport useMarvelServices from \"../../services/MarvelServices\";\r\nimport ReactLoading from 'react-loading';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './searchForm.scss';\r\n\r\nexport default function SearchForm() {\r\n    const [character, setCharacter] = useState(null);\r\n    const {process, setProcess, getCharacterByName} = useMarvelServices();\r\n\r\n    function findChar(name) {\r\n        getCharacterByName(name)\r\n            .then(onSuccess)\r\n            .catch(() => setProcess('error'));\r\n    }\r\n\r\n    function onSuccess(result) {\r\n        setCharacter(result);\r\n        setProcess('confirmed')\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{name: ''}}\r\n            validationSchema={Yup.object({\r\n                name: Yup.string().required('This field is required')\r\n            })}\r\n            onSubmit={(values) => {\r\n                findChar(values.name);\r\n            }}>\r\n\r\n            <Form className={\"search \" + (process === 'error' ? 'search_failure' : (process === 'confirmed' ? 'search_success' : ''))}>\r\n                <p>Or find a character by name:</p>\r\n                <div className=\"search__input\">\r\n                    <Field name=\"name\" type=\"text\" id=\"search\" placeholder=\"Enter name\"/>\r\n                    <button \r\n                        type=\"submit\" \r\n                        className=\"button button_red\" \r\n                        disabled={process === 'loading'}>\r\n                        {process === 'loading' ? <ReactLoading type='cylon' width='50px' height='50px'/> : 'Find'}\r\n                    </button>\r\n                </div>\r\n                <ErrorMessage name=\"name\" className=\"error\" component='p'/>\r\n                <div className=\"search-message\">\r\n                    <p>\r\n                        {process === 'error' ? 'The character was not found. Check the name and try again' : \r\n                        (process === 'confirmed' ? `There is! Visit ${character.name} page?` : '')}\r\n                    </p>\r\n                    <Link to={character ? `/characters/${character.name}` : ''} className=\"button\">To page</Link>\r\n                </div>\r\n            </Form>\r\n        </Formik>\r\n    )\r\n}","import { useState, useEffect } from 'react';\r\nimport { CSSTransition } from 'react-transition-group'; \r\nimport PropTypes from 'prop-types';\r\nimport Skeleton from '../skeleton/Skeleton';\r\nimport Spinner from '../spinner/Spinner';\r\nimport Error from '../error/Error';\r\nimport SearchForm from '../searchForm/SearchForm';\r\nimport useMarvelServices from '../../services/MarvelServices';\r\n\r\nimport './charInfo.scss';\r\n\r\nfunction setContent(process, Component, data) {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <Error/>;\r\n        default:\r\n    }\r\n}\r\n\r\nfunction CharInfo(props) {\r\n    const [character, setCharacter] = useState(null);\r\n          \r\n    const {getCharacterById, process, setProcess} = useMarvelServices();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, []) \r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [props.charId]) \r\n\r\n    function updateChar() {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n\r\n        getCharacterById(charId).then(character => setCharacter(character)).then(() => setProcess('confirmed'));\r\n    }\r\n    \r\n        return (\r\n            <div className=\"about\">\r\n                <div className=\"about__content\">\r\n                        <CSSTransition in={process === 'confirmed'} timeout={300} classNames=\"appear\">\r\n                            <div className=\"about__container\">\r\n                                {setContent(process, View, character)}\r\n                            </div>\r\n                        </CSSTransition>\r\n                    <SearchForm/>\r\n                </div>\r\n            </div>\r\n        );\r\n}\r\n\r\nfunction View({data}) {\r\n    const {name, description, thumbnail, wiki, homepage} = data,\r\n          comics = data.comics.slice(0, 15);\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"about__header\">\r\n                <img src={thumbnail} alt={name} className=\"about__img\"/>\r\n                <div className=\"about__info\">\r\n                    <div className=\"about__name\">{name}</div>\r\n                    <div className=\"about__btns\">\r\n                        <a tabIndex={-1} href={homepage}><button className=\"button button_red\">Homepage</button></a>\r\n                        <a tabIndex={-1} href={wiki}><button className=\"button\">Wiki</button></a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"about__description\">\r\n                {description}\r\n            </div>\r\n\r\n            <h2>Comics:</h2>\r\n            <div className=\"about__comics\">\r\n                <ul>\r\n                    {comics.length > 0 ? \r\n                    comics.map((comic, i) => {\r\n                        return <li key={i} className=\"comic\">{comic.name}</li>;\r\n                    }) \r\n                    : 'There is no comics here. Yet...'}\r\n                </ul>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { Component } from 'react';\r\nimport Error from '../error/Error';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({error: true});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <Error/>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport visionBg from '../../resources/img/vision-bg.png';\r\n\r\nexport default function MainPage() {\r\n    const [character, setCharacter] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setCharacter(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Web site created using create-react-app\"\r\n                />\r\n                <title>Marvel DB</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <section className='characters'>\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={character} />\r\n                </ErrorBoundary>\r\n                <img className=\"background-img\" src={visionBg} alt=\"vision\" />\r\n            </section>\r\n        </>\r\n        \r\n    )\r\n}","var _rect, _rect2, _rect3, _rect4, _rect5, _rect6, _rect7, _rect8;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgSpinner(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    style: {\n      margin: \"auto\",\n      background: \"none\",\n      display: \"block\",\n      shapeRendering: \"auto\"\n    },\n    width: \"200px\",\n    height: \"200px\",\n    viewBox: \"0 0 100 100\",\n    preserveAspectRatio: \"xMidYMid\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 19,\n    y: 19,\n    width: 20,\n    height: 20,\n    fill: \"#232222\"\n  }, /*#__PURE__*/React.createElement(\"animate\", {\n    attributeName: \"fill\",\n    values: \"#9f0013;#232222;#232222\",\n    keyTimes: \"0;0.125;1\",\n    dur: \"1s\",\n    repeatCount: \"indefinite\",\n    begin: \"0s\",\n    calcMode: \"discrete\"\n  }))), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 40,\n    y: 19,\n    width: 20,\n    height: 20,\n    fill: \"#232222\"\n  }, /*#__PURE__*/React.createElement(\"animate\", {\n    attributeName: \"fill\",\n    values: \"#9f0013;#232222;#232222\",\n    keyTimes: \"0;0.125;1\",\n    dur: \"1s\",\n    repeatCount: \"indefinite\",\n    begin: \"0.125s\",\n    calcMode: \"discrete\"\n  }))), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 61,\n    y: 19,\n    width: 20,\n    height: 20,\n    fill: \"#232222\"\n  }, /*#__PURE__*/React.createElement(\"animate\", {\n    attributeName: \"fill\",\n    values: \"#9f0013;#232222;#232222\",\n    keyTimes: \"0;0.125;1\",\n    dur: \"1s\",\n    repeatCount: \"indefinite\",\n    begin: \"0.25s\",\n    calcMode: \"discrete\"\n  }))), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 19,\n    y: 40,\n    width: 20,\n    height: 20,\n    fill: \"#232222\"\n  }, /*#__PURE__*/React.createElement(\"animate\", {\n    attributeName: \"fill\",\n    values: \"#9f0013;#232222;#232222\",\n    keyTimes: \"0;0.125;1\",\n    dur: \"1s\",\n    repeatCount: \"indefinite\",\n    begin: \"0.875s\",\n    calcMode: \"discrete\"\n  }))), _rect5 || (_rect5 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 61,\n    y: 40,\n    width: 20,\n    height: 20,\n    fill: \"#232222\"\n  }, /*#__PURE__*/React.createElement(\"animate\", {\n    attributeName: \"fill\",\n    values: \"#9f0013;#232222;#232222\",\n    keyTimes: \"0;0.125;1\",\n    dur: \"1s\",\n    repeatCount: \"indefinite\",\n    begin: \"0.375s\",\n    calcMode: \"discrete\"\n  }))), _rect6 || (_rect6 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 19,\n    y: 61,\n    width: 20,\n    height: 20,\n    fill: \"#232222\"\n  }, /*#__PURE__*/React.createElement(\"animate\", {\n    attributeName: \"fill\",\n    values: \"#9f0013;#232222;#232222\",\n    keyTimes: \"0;0.125;1\",\n    dur: \"1s\",\n    repeatCount: \"indefinite\",\n    begin: \"0.75s\",\n    calcMode: \"discrete\"\n  }))), _rect7 || (_rect7 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 40,\n    y: 61,\n    width: 20,\n    height: 20,\n    fill: \"#232222\"\n  }, /*#__PURE__*/React.createElement(\"animate\", {\n    attributeName: \"fill\",\n    values: \"#9f0013;#232222;#232222\",\n    keyTimes: \"0;0.125;1\",\n    dur: \"1s\",\n    repeatCount: \"indefinite\",\n    begin: \"0.625s\",\n    calcMode: \"discrete\"\n  }))), _rect8 || (_rect8 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 61,\n    y: 61,\n    width: 20,\n    height: 20,\n    fill: \"#232222\"\n  }, /*#__PURE__*/React.createElement(\"animate\", {\n    attributeName: \"fill\",\n    values: \"#9f0013;#232222;#232222\",\n    keyTimes: \"0;0.125;1\",\n    dur: \"1s\",\n    repeatCount: \"indefinite\",\n    begin: \"0.5s\",\n    calcMode: \"discrete\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSpinner);\nexport default __webpack_public_path__ + \"static/media/spinner.abba77cc71e5f76258fc50b87e593ac6.svg\";\nexport { ForwardRef as ReactComponent };","import spinner from './spinner.svg'\r\nimport './spinner.scss';\r\n\r\nconst Spinner = () => {\r\n    \r\n    return (\r\n        <>\r\n            <img src={spinner} alt=\"\" className=\"spinner\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Spinner;","import md5 from \"md5\";\r\nimport useHttp from \"../hooks/http.hook\";\r\n\r\nexport default function useMarvelServices() {\r\n    const {request, process, setProcess} = useHttp();\r\n\r\n    const _offset = 210,\r\n          _apibase = 'https://gateway.marvel.com:443/v1/public/',\r\n          _publickey = 'b613e5c1ee278d1974ac9c3d77544391',\r\n          _privatekey = 'b32e138e4085075474c409641be15ebc5b46dd44';\r\n    \r\n    const timestamp = +new Date(),\r\n          hash = md5(timestamp + _privatekey + _publickey);\r\n\r\n    async function getCharacters(offset = _offset) {\r\n        const result = await request(`${_apibase}characters?` +\r\n                                         `limit=9&offset=${offset}` +\r\n                                         \"&ts=\" + timestamp +\r\n                                         \"&apikey=b613e5c1ee278d1974ac9c3d77544391\" +\r\n                                         \"&hash=\" + hash);\r\n            \r\n        return result.data.results.map(_handleChars)\r\n    }\r\n\r\n    async function getCharacterById(id) {\r\n        const response = await request(`${_apibase}characters/${id}?` +\r\n                                            \"&ts=\" + timestamp +\r\n                                            \"&apikey=b613e5c1ee278d1974ac9c3d77544391\" +\r\n                                            \"&hash=\" + hash);\r\n\r\n        return _handleChars(response.data.results[0]);\r\n    }\r\n\r\n    async function getComics(offset = 0) {\r\n        const response = await request(`${_apibase}comics?limit=8&offset=${offset}` + \r\n                                       \"&ts=\" + timestamp +\r\n                                       \"&apikey=b613e5c1ee278d1974ac9c3d77544391\" +\r\n                                       \"&hash=\" + hash);\r\n\r\n        return response.data.results.map(_handleComics);\r\n    }\r\n\r\n    async function getComicById(id) {\r\n        const response = await request(`${_apibase}comics/${id}?` + \r\n                                        `ts=` + timestamp +\r\n                                        \"&apikey=b613e5c1ee278d1974ac9c3d77544391\" +\r\n                                        \"&hash=\" + hash);\r\n\r\n        return _handleComics(response.data.results[0]);\r\n    } \r\n\r\n    async function getCharacterByName(name) {\r\n        const response = await request(`${_apibase}characters?name=${name}&` +\r\n                                        `ts=` + timestamp +\r\n                                        \"&apikey=b613e5c1ee278d1974ac9c3d77544391\" +\r\n                                        \"&hash=\" + hash)\r\n        \r\n        return _handleChars(response.data.results[0]);\r\n    }\r\n\r\n    const _handleChars = (response) => ({\r\n        id: response.id,\r\n        name: response.name,\r\n        description: response.description ? response.description : 'There is no description here. Yet...',\r\n        thumbnail: response.thumbnail.path + '.' + response.thumbnail.extension,\r\n        homepage: response.urls[0].url,\r\n        wiki: response.urls[1].url,\r\n        comics: response.comics.items\r\n    })\r\n\r\n    const _handleComics = (comic) => ({\r\n        id: comic.id,\r\n        title: comic.title,\r\n        thumbnail: Object.values(comic.thumbnail).join('.'),\r\n        price: comic.prices[0].price,\r\n        description: comic.description ? comic.description : 'There is no description here. Yet...',\r\n        pages: comic.pageCount,\r\n        language: comic.textObjects[0] ? comic.textObjects[0].language : ''\r\n    })\r\n\r\n    return {\r\n        getCharacters, \r\n        getCharacterById, \r\n        getComics, \r\n        getComicById, \r\n        getCharacterByName, \r\n        process,\r\n        setProcess\r\n    }\r\n}\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport default function useHttp() {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch from ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            return data;\r\n        } catch(error) {\r\n            setProcess('error');\r\n            return error;\r\n        }\r\n    }, []);\r\n\r\n    return {request, process, setProcess};\r\n}","import Error from '../components/error/Error';\r\nimport Spinner from '../components/spinner/Spinner';\r\n\r\nexport default function setContent(process, Component, data) {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <Error/>;\r\n        default:\r\n    }\r\n}","import Error from '../components/error/Error';\r\nimport Spinner from '../components/spinner/Spinner';\r\n\r\nexport default function setListContent(process, Component, initial) {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner/>;\r\n        case 'loading':\r\n            return initial ? <Spinner/> : <Component/>;\r\n        case 'confirmed':\r\n            return <Component/>;\r\n        case 'error':\r\n            return <Error/>;\r\n        default:\r\n    }\r\n}"],"names":["src","error","alt","className","View","data","name","description","thumbnail","homepage","wiki","length","href","useState","character","setCharacter","useMarvelServices","getCharacterById","process","setProcess","updateCharacter","id","Math","floor","random","then","useEffect","CSSTransition","in","timeout","classNames","setContent","disabled","onClick","type","width","height","hammer","props","characters","setCharacters","offset","setOffset","initialLoading","setInitialLoading","charsEnded","setCharsEnded","getCharacters","cardsRefs","useRef","updateCharacters","map","onLoaded","newCharacters","setFocus","current","forEach","card","style","transform","boxShadow","transition","focus","window","scrollTo","left","top","document","body","scrollHeight","behavior","content","useMemo","setListContent","i","ref","element","tabIndex","onCharSelected","onKeyDown","event","key","match","preventDefault","renderCharacters","display","SearchForm","getCharacterByName","onSuccess","result","initialValues","validationSchema","Yup","required","onSubmit","values","catch","placeholder","component","to","Component","Spinner","Error","comics","slice","comic","updateChar","charId","ErrorBoundary","state","errorInfo","console","log","this","setState","children","MainPage","Helmet","visionBg","spinner","request","useCallback","url","method","headers","fetch","response","ok","status","json","useHttp","_offset","_apibase","timestamp","Date","hash","md5","results","_handleChars","_handleComics","path","extension","urls","items","title","Object","join","price","prices","pages","pageCount","language","textObjects","getComics","getComicById","initial"],"sourceRoot":""}